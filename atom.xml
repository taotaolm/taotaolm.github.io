<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淘淘联盟的博客</title>
  
  
  <link href="http://taotaolm.vip/atom.xml" rel="self"/>
  
  <link href="http://taotaolm.vip/"/>
  <updated>2021-01-12T08:49:25.177Z</updated>
  <id>http://taotaolm.vip/</id>
  
  <author>
    <name>taotaolm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用turtle画国旗</title>
    <link href="http://taotaolm.vip/2020/12/25/python/python-7/"/>
    <id>http://taotaolm.vip/2020/12/25/python/python-7/</id>
    <published>2020-12-25T02:54:53.000Z</published>
    <updated>2021-01-12T08:49:25.177Z</updated>
    
    <content type="html"><![CDATA[<p>Turtle库是Python语言中绘制图像的函数库，通常称之为海龟绘图。本文主要通过画国旗的例子，来讲解一下turtle库中的一些方法。Turtle可以把它想象成一个小海龟，在一个横轴为x、纵轴为y的坐标系，原点(0,0)位置开始，它根据一组函数指令的控制，在这个平面坐标系中移动，从而在它爬行的路径上绘制了图形。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>Turtle库的api详解请自行学习，本文中所用到方法会在程序代码中写明用法。学习地址<a href="https://docs.python.org/zh-cn/3/library/turtle.html%E3%80%82">https://docs.python.org/zh-cn/3/library/turtle.html。</a></p><h2 id="1、认识turtle"><a href="#1、认识turtle" class="headerlink" title="1、认识turtle"></a>1、认识turtle</h2><p>使用turtle库，需要先引入turtle库。然后我们看下小乌龟的初始位置在哪里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.st()  <span class="comment">#显示小乌龟，与showturtle()方法用法相同</span></span><br><span class="line">turtle.done() <span class="comment">#用来停止画笔绘制，但绘图窗体不关闭。</span></span><br></pre></td></tr></table></figure><p><img src="1.png"></p><p>从上面的代码我们就很清楚小乌龟的初始位置以及小乌龟朝向的角度计算。</p><h2 id="2、国旗规范介绍"><a href="#2、国旗规范介绍" class="headerlink" title="2、国旗规范介绍"></a>2、国旗规范介绍</h2><p><img src="2.jpg"></p><p>先将旗面划分为4个等分长方形，再将左上方长方形划分长宽15×10个方格。大五角星的中心位于该长方形上5下5、左5右10之处。大五角星外接圆的直径为6单位长度。四颗小五角星的中心点，第一颗位于上2下8、左10右5，第二颗位于上4下6、左12右3，第三颗位于上7下3、左12右3，第四颗位于上9下1、左10右5之处。每颗小五角星外接圆的直径均为2单位长度。四颗小五角星均有一角尖正对大五角星的中心点。根据《中华人民共和国国旗法》第四条规定，制作国旗的企业由省、自治区和直辖市的人民政府指定。国旗的长宽之比为3:2。</p><h2 id="3、画国旗"><a href="#3、画国旗" class="headerlink" title="3、画国旗"></a>3、画国旗</h2><p>在认识turtle中，我们知道小乌龟的初始位置是平面直角坐标系的原点，那么我们正好使用这一特性，从第二象限寻找起始点，画一个长方形，作为国旗的主体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.st()</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">turtle.pencolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">turtle.goto(-<span class="number">150</span>, <span class="number">100</span>)  <span class="comment"># 前往（-150，100）</span></span><br><span class="line">turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    turtle.forward(<span class="number">300</span>)  <span class="comment"># 前进300像素</span></span><br><span class="line">    turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">    turtle.forward(<span class="number">200</span>)  <span class="comment"># 前进200像素</span></span><br><span class="line">    turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p><img src="3.png"></p><p>下一步画星星，我们先要知道星星该如何画。从起始点向前走100像素，此时小乌龟的方向是正东，也可以理解为需要顺时针旋转144度，为什么是144度呢？因为五角星的夹角是36度。具体讲解如下图。</p><p><img src="4.png"></p><p>五角星的绘制需要五条线组成，因此需要执行五次。具体代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.st()</span><br><span class="line">turtle.speed(<span class="number">2</span>)  <span class="comment"># 速度</span></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">turtle.pencolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    turtle.forward(<span class="number">100</span>)  <span class="comment"># 前进10像素</span></span><br><span class="line">    turtle.right(<span class="number">144</span>)  <span class="comment"># 右转144度</span></span><br><span class="line">turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>执行代码，绘制五角星效果如下。</p><p><img src="5.png"></p><p>知道了长方形如何画和五角星如何画之后，我们就可以按照国旗的标准来绘制国旗了。首先我们要画一个长方形，然后绘制五角星。长方形绘制比较简单，此处不再过多解决。下面我们详细说说五角星的画法。</p><p>根据国旗的要求旗面划分为4个等分长方形，再将左上方长方形划分长宽15×10个方格。因为我们取的起始位置是（-150，100），因此我们就可以知道小方格的的宽度就是10。那么大五角星的中心位于该长方形上5下5、左5右10之处。x轴我们取左5，y轴我们取上5。已知小乌龟的起始位置是（-150，100），因此x轴需要向右移动5格，也就是<code>-150 + 5*10</code>（靠近原点，加法）；y轴是上5，也就是向下移动5格，也就是<code>100-5*10</code>（靠近原点，减法），得到第一个五角星的中心点。</p><p>因为我们画五角星是通过五角星的一个点绘制，因此我们还需要通过中心点，找到绘制五角星的起始点。通过中心点逆时针旋转90度，让小乌龟朝上，然后走半径的距离，在顺时针旋转162度，找到画五角星的起始点，然后开始绘制五角星，具体图解与代码如下。</p><p><img src="6.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_square</span>(<span class="params">start_x, start_y, width, height</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制国旗矩形&quot;&quot;&quot;</span></span><br><span class="line">    turtle.fillcolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">    turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">    turtle.goto(start_x, start_y)  <span class="comment"># 前往</span></span><br><span class="line">    turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">    turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        turtle.forward(width)  <span class="comment"># 前进width像素</span></span><br><span class="line">        turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">        turtle.forward(height)  <span class="comment"># 前进height像素</span></span><br><span class="line">        turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">    turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">darw_start</span>(<span class="params">x, y, width</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制国五角星&quot;&quot;&quot;</span></span><br><span class="line">    turtle.fillcolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">    turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">    turtle.goto(x, y)  <span class="comment"># 前往坐标</span></span><br><span class="line">    turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">    turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):   <span class="comment"># 循环五次画出五角星</span></span><br><span class="line">        turtle.forward(width)  <span class="comment"># 前进width像素</span></span><br><span class="line">        turtle.right(<span class="number">144</span>)  <span class="comment"># 右转144度</span></span><br><span class="line">    turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;主程序&quot;&quot;&quot;</span></span><br><span class="line">    turtle.ht()  <span class="comment"># 隐藏小海龟</span></span><br><span class="line">    turtle.up()  <span class="comment"># 提笔</span></span><br><span class="line">    turtle.speed(<span class="number">10</span>)  <span class="comment"># 画图速度</span></span><br><span class="line">    start_x, start_y = -<span class="number">150</span>, <span class="number">100</span>  <span class="comment"># 国旗的左上角的坐标 起始位置</span></span><br><span class="line">    draw_square(start_x, start_y, <span class="number">300</span>, <span class="number">200</span>)  <span class="comment"># 画国旗矩形</span></span><br><span class="line">    pice = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 画大星星 中心点是上5，左5</span></span><br><span class="line">    center_x, center_y = start_x + <span class="number">5</span>*pice, start_y - <span class="number">5</span>*pice  <span class="comment"># x轴往左走，就是+间隔，y轴往下轴，就-间隔</span></span><br><span class="line">    turtle.goto(center_x, center_y)  <span class="comment"># 到中心点</span></span><br><span class="line">    turtle.left(<span class="number">90</span>)  <span class="comment"># 调整方向，逆时针移动90度，让小海龟的方向朝上</span></span><br><span class="line">    turtle.forward(<span class="number">3</span> * pice)  <span class="comment"># 走半径的距离</span></span><br><span class="line">    turtle.right(<span class="number">162</span>)  <span class="comment"># 调整方向，顺时针旋转162度，准备画星星</span></span><br><span class="line">    darw_start(turtle.xcor(), turtle.ycor(), <span class="number">5</span>*pice)</span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行程序，效果如下。</p><img src="7.png" style="zoom:75%;" /><p>现在画出来一个大星星，还有四个小星星。在寻找小星星的位置，需要注意一点的是四颗小五角星均有一角尖正对大五角星的中心点。也就是说，小星星的角需要对着大星星的中心点。首先，我们画完大星星之后，让小海龟回到中心点，并且调整小海龟的角度，然后让小海龟到小星星的中心点。到达小星星中心点，我们发现小海龟的 方向是不对的，我们需要让小海龟的角度调整到与两个中心点相同的角度。然后按照角度返回固定的半径距离，在顺时针旋转162度即可找到绘制小星星的起始点。具体图解和代码如下。</p><p><img src="8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_square</span>(<span class="params">start_x, start_y, width, height</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制国旗矩形&quot;&quot;&quot;</span></span><br><span class="line">    turtle.fillcolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">    turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">    turtle.goto(start_x, start_y)  <span class="comment"># 前往</span></span><br><span class="line">    turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">    turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        turtle.forward(width)  <span class="comment"># 前进width像素</span></span><br><span class="line">        turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">        turtle.forward(height)  <span class="comment"># 前进height像素</span></span><br><span class="line">        turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">    turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">darw_start</span>(<span class="params">x, y, width</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制国五角星&quot;&quot;&quot;</span></span><br><span class="line">    turtle.fillcolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">    turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">    turtle.goto(x, y)  <span class="comment"># 前往坐标</span></span><br><span class="line">    turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">    turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):   <span class="comment"># 循环五次画出五角星</span></span><br><span class="line">        turtle.forward(width)  <span class="comment"># 前进width像素</span></span><br><span class="line">        turtle.right(<span class="number">144</span>)  <span class="comment"># 右转144度</span></span><br><span class="line">    turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;主程序&quot;&quot;&quot;</span></span><br><span class="line">    turtle.ht()  <span class="comment"># 隐藏小海龟</span></span><br><span class="line">    turtle.up()  <span class="comment"># 提笔</span></span><br><span class="line">    turtle.speed(<span class="number">10</span>)  <span class="comment"># 画图速度</span></span><br><span class="line">    start_x, start_y = -<span class="number">150</span>, <span class="number">100</span>  <span class="comment"># 国旗的左上角的坐标 起始位置</span></span><br><span class="line">    draw_square(start_x, start_y, <span class="number">300</span>, <span class="number">200</span>)  <span class="comment"># 画国旗矩形</span></span><br><span class="line">    pice = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 画大星星 中心点是上5，左5</span></span><br><span class="line">    center_x, center_y = start_x + <span class="number">5</span>*pice, start_y - <span class="number">5</span>*pice  <span class="comment"># x轴往左走，就是+间隔，y轴往下轴，就-间隔</span></span><br><span class="line">    turtle.goto(center_x, center_y)  <span class="comment"># 到中心点</span></span><br><span class="line">    turtle.left(<span class="number">90</span>)  <span class="comment"># 调整方向，逆时针移动90度，让小海龟的方向朝上</span></span><br><span class="line">    turtle.forward(<span class="number">3</span> * pice)  <span class="comment"># 走半径的距离</span></span><br><span class="line">    turtle.right(<span class="number">162</span>)  <span class="comment"># 调整方向，顺时针旋转162度，准备画星星</span></span><br><span class="line">    darw_start(turtle.xcor(), turtle.ycor(), <span class="number">5</span>*pice)</span><br><span class="line"></span><br><span class="line">    turtle.right(<span class="number">18</span>)  <span class="comment"># 调整角度</span></span><br><span class="line">    turtle.up()  <span class="comment"># 提笔</span></span><br><span class="line">    turtle.goto(center_x, center_y)  <span class="comment"># 回到中心点</span></span><br><span class="line">    turtle.goto(start_x + <span class="number">10</span>*pice, start_y - <span class="number">2</span>*pice)  <span class="comment"># 到小星星的中心点</span></span><br><span class="line">    turtle.right(turtle.heading())  <span class="comment"># 顺时针旋转度当前的方向角度  turtle.heading()返回当前朝向的角度</span></span><br><span class="line">    turtle.left(<span class="built_in">round</span>(turtle.towards(center_x, center_y)))  <span class="comment"># 逆时针旋转两点之间的角度</span></span><br><span class="line">    turtle.forward(pice)  <span class="comment"># 往中心点走半径的距离</span></span><br><span class="line">    turtle.right(<span class="number">162</span>)  <span class="comment"># 与中心连线的方向，向上旋转18度  180-18 = 162度</span></span><br><span class="line">    darw_start(turtle.xcor(), turtle.ycor(), <span class="number">2</span>*pice)  <span class="comment"># 取当前坐标，画星星</span></span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行效果如下。</p><p><img src="9.png"></p><p>其他三个星星的绘制方式与第一个小星星相同，因此此处直接给出完成的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_square</span>(<span class="params">start_x, start_y, width, height</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制国旗矩形&quot;&quot;&quot;</span></span><br><span class="line">    turtle.fillcolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;red&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">    turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">    turtle.goto(start_x, start_y)  <span class="comment"># 前往到坐标点</span></span><br><span class="line">    turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">    turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        turtle.forward(width)  <span class="comment"># 前进width像素</span></span><br><span class="line">        turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">        turtle.forward(height)  <span class="comment"># 前进height像素</span></span><br><span class="line">        turtle.right(<span class="number">90</span>)  <span class="comment"># 右转90度</span></span><br><span class="line">    turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">darw_start</span>(<span class="params">x, y, width</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制国五角星&quot;&quot;&quot;</span></span><br><span class="line">    turtle.fillcolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 填充颜色</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;yellow&quot;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">    turtle.up()  <span class="comment"># 画笔抬起</span></span><br><span class="line">    turtle.goto(x, y)  <span class="comment"># 前往坐标点</span></span><br><span class="line">    turtle.down()  <span class="comment"># 画笔落下</span></span><br><span class="line">    turtle.begin_fill()  <span class="comment"># 开始填充</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):   <span class="comment"># 循环五次画出五角星</span></span><br><span class="line">        turtle.forward(width)  <span class="comment"># 前进width像素</span></span><br><span class="line">        turtle.right(<span class="number">144</span>)  <span class="comment"># 右转144度</span></span><br><span class="line">    turtle.end_fill()  <span class="comment"># 结束填充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;主程序&quot;&quot;&quot;</span></span><br><span class="line">    turtle.ht()  <span class="comment"># 隐藏小海龟</span></span><br><span class="line">    turtle.up()  <span class="comment"># 提笔</span></span><br><span class="line">    turtle.speed(<span class="number">10</span>)  <span class="comment"># 画图速度</span></span><br><span class="line">    size = <span class="number">2</span>  <span class="comment"># 国旗的大小的倍数</span></span><br><span class="line">    pice = <span class="number">10</span>*size  <span class="comment"># 坐标系的间隔大小</span></span><br><span class="line">    start_x, start_y = -<span class="number">150</span>*size, <span class="number">100</span>*size  <span class="comment"># 国旗的左上角的坐标 起始位置</span></span><br><span class="line">    draw_square(start_x, start_y, <span class="number">300</span>*size, <span class="number">200</span>*size)  <span class="comment"># 画国旗矩形</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画大星星 中心点是上5，左5</span></span><br><span class="line">    center_x, center_y = start_x + <span class="number">5</span>*pice, start_y - <span class="number">5</span>*pice  <span class="comment"># x轴往左走，就是+间隔，y轴往下轴，就-间隔</span></span><br><span class="line">    turtle.goto(center_x, center_y)  <span class="comment"># 到中心点</span></span><br><span class="line">    turtle.left(<span class="number">90</span>)  <span class="comment"># 调整方向，逆时针移动90度，让小海龟的方向朝上</span></span><br><span class="line">    turtle.forward(<span class="number">3</span> * pice)  <span class="comment"># 走半径的距离</span></span><br><span class="line">    turtle.right(<span class="number">162</span>)  <span class="comment"># 调整方向，顺时针旋转162度，准备画星星</span></span><br><span class="line">    darw_start(turtle.xcor(), turtle.ycor(), <span class="number">5</span>*pice)</span><br><span class="line">    <span class="comment"># 四个星星的坐标</span></span><br><span class="line">    x_poses, y_poses = [<span class="number">10</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">    <span class="comment"># 画小星星</span></span><br><span class="line">    <span class="keyword">for</span> x_pos, y_pos <span class="keyword">in</span> <span class="built_in">zip</span>(x_poses, y_poses):</span><br><span class="line">        turtle.right(<span class="number">18</span>)  <span class="comment"># 调整角度</span></span><br><span class="line">        turtle.up()  <span class="comment"># 提笔</span></span><br><span class="line">        turtle.goto(center_x, center_y)  <span class="comment"># 回到中心点</span></span><br><span class="line">        turtle.goto(start_x + x_pos*pice, start_y - y_pos*pice)  <span class="comment"># 到小星星的中心点</span></span><br><span class="line">        <span class="comment"># 顺时针旋转度当前的方向角度  turtle.heading()返回当前朝向的角度</span></span><br><span class="line">        turtle.right(turtle.heading())</span><br><span class="line">        turtle.left(<span class="built_in">round</span>(turtle.towards(center_x, center_y)))  <span class="comment"># 逆时针旋转两点之间的角度</span></span><br><span class="line">        turtle.forward(pice)  <span class="comment"># 往中心点走半径的距离</span></span><br><span class="line">        turtle.right(<span class="number">162</span>)  <span class="comment"># 与中心连线的方向，顺时针旋转18度  180-18 = 162度</span></span><br><span class="line">        darw_start(turtle.xcor(), turtle.ycor(), <span class="number">2</span>*pice)  <span class="comment"># 取当前坐标，画星星</span></span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行程序，执行效果如下。</p><img src="10.png" style="zoom:75%;" /><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>本文主要讲解国旗的绘制过程，通过分解国旗画法，详解阐述国旗的绘制过程。在学习的过程中，介绍turtle库的一些常用方法。笔者没有着重讲解turtle的方法，读者可以在学习的过程中，查阅api来了解一些方法的用处。截止到本篇文章，是笔者学习python的第一阶段。后续笔者会继续更新下一阶段的学习，python的游戏编程部分。感兴趣的读者请持续关注本博客。感谢大家的支持与关注！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Turtle库是Python语言中绘制图像的函数库，通常称之为海龟绘图。本文主要通过画国旗的例子，来讲解一下turtle库中的一些方法。Turtle可以把它想象成一个小海龟，在一个横轴为x、纵轴为y的坐标系，原点(0,0)位置开始，它根据一组函数指令的控制，在这个平面坐标系中移动，从而在它爬行的路径上绘制了图形。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://taotaolm.vip/categories/python/"/>
    
    
    <category term="turtle" scheme="http://taotaolm.vip/tags/turtle/"/>
    
    <category term="画国旗" scheme="http://taotaolm.vip/tags/%E7%94%BB%E5%9B%BD%E6%97%97/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程（二）</title>
    <link href="http://taotaolm.vip/2020/12/24/python/python-6/"/>
    <id>http://taotaolm.vip/2020/12/24/python/python-6/</id>
    <published>2020-12-24T04:22:30.000Z</published>
    <updated>2021-01-09T08:32:29.482Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文，本文继续对面向对象编程进行讲解。本文主要介绍面向对象编程的一些进阶内容，以及对面向对象编程的另外两个特性继承和多态进行详细的讲解。</p><a id="more"></a><h2 id="1、限定属性"><a href="#1、限定属性" class="headerlink" title="1、限定属性"></a>1、限定属性</h2><p>Python是一门动态语言，它允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。下面我们看个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, brand, color, oil</span>):</span></span><br><span class="line">        self.brand = brand</span><br><span class="line">        self.color = color</span><br><span class="line">        self.oil = oil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化car1对象，它是品牌是吉利，颜色是白色，油耗是5</span></span><br><span class="line">    car1 = Car(<span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    car1.price = <span class="string">&#x27;12W&#x27;</span>  <span class="comment"># 随意增加一个价格的属性  price = 12w</span></span><br><span class="line">    print(<span class="string">&quot;car1对象的价格是&quot;</span>+car1.price)  <span class="comment"># 打印价格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>例子中，Car类并没有定义price这个属性，而在程序运行的时候，动态定义一个price属性，是可以正常运行的。那么如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;brand&#x27;</span>, <span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;oil&#x27;</span>)  <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, brand, color, oil</span>):</span></span><br><span class="line">        self.brand = brand</span><br><span class="line">        self.color = color</span><br><span class="line">        self.oil = oil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化car1对象，它是品牌是吉利，颜色是白色，油耗是5</span></span><br><span class="line">    car1 = Car(<span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    car1.price = <span class="string">&#x27;12W&#x27;</span>  <span class="comment"># AttributeError: &#x27;Car&#x27; object has no attribute &#x27;price&#x27;</span></span><br><span class="line">    print(<span class="string">&quot;car1对象的价格是&quot;</span>+car1.price)  <span class="comment"># 打印价格</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>加上__slots__限定属性之后，我们发现程序不能正常运行，执行报错<code>AttributeError: &#39;Car&#39; object has no attribute &#39;price&#39;</code>。已经不能随意改变类的属性了，在实际开发过程中，通常我们都会对类的属性进行限定，因此我们需要熟练使用__slots__属性。</p><h2 id="2、静态方法和类方法"><a href="#2、静态方法和类方法" class="headerlink" title="2、静态方法和类方法"></a>2、静态方法和类方法</h2><p>Python中有许多内置函数，此章节介绍一下staticmethod() 和classmethod()的用法。</p><ul><li>使用@staticmethod修饰符修饰后的方法，则变为静态方法，静态方法调用时，对象不需要实例化，直接使用类名.方法名即可调用。</li><li>使用@classmethod修饰符修饰后的方法，对应的方法不需要实例化，不需要self参数，但第一个参数需要是表示自身类的cls参数，可以来调用类的属性，类的方法，实例化对象等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;日期&quot;&quot;&quot;</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_year&#x27;</span>, <span class="string">&#x27;_month&#x27;</span>, <span class="string">&#x27;_day&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, year=<span class="number">0</span>, month=<span class="number">0</span>, day=<span class="number">0</span></span>):</span></span><br><span class="line">        self._year = year</span><br><span class="line">        self._month = month</span><br><span class="line">        self._day = day</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">now</span>(<span class="params">cls</span>):</span></span><br><span class="line">        ctime = datetime.datetime.now()  <span class="comment"># 获取当前日期</span></span><br><span class="line">        <span class="keyword">return</span> cls(ctime.year, ctime.month, ctime.day)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span>(<span class="params">year, month, day</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;校验日期是否合法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> &lt;= year &lt;= <span class="number">3999</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= month &lt;= <span class="number">12</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= day &lt;= <span class="number">31</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示日期&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d-%02d-%02d&#x27;</span> % \</span><br><span class="line">               (self._year, self._month, self._day)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    now = MyDate.now()</span><br><span class="line">    print(<span class="string">&quot;打印当前日期：&quot;</span>, now.show())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> MyDate.is_valid(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">23</span>):</span><br><span class="line">        d = MyDate(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">23</span>)</span><br><span class="line">        print(<span class="string">&quot;打印自定义的时间：&quot;</span>, d.show())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;时间格式不正确.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> MyDate.is_valid(<span class="number">2020</span>, <span class="number">13</span>, <span class="number">2</span>):</span><br><span class="line">        d2 = MyDate(<span class="number">2020</span>, <span class="number">13</span>, <span class="number">2</span>)</span><br><span class="line">        print(<span class="string">&quot;打印自定义的时间：&quot;</span>, d2.show())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;时间格式不正确.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>上面的例子比较简单，读者自己学习一下，此处就不做过多的讲解。</p><h2 id="3、枚举类"><a href="#3、枚举类" class="headerlink" title="3、枚举类"></a>3、枚举类</h2><p>在《python语言基础介绍》文章中，我们讲元祖的时候，例子中讲到了利用元祖定义月份。那么在本章中，我们将使用枚举类来定义月份。使用枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了<code>Enum</code>类来实现这个功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>))</span><br><span class="line"><span class="comment"># 循环枚举类型</span></span><br><span class="line"><span class="keyword">for</span> name, member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    print(name, <span class="string">&#x27;=&gt;&#x27;</span>, member, <span class="string">&#x27;,&#x27;</span>, member.value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印枚举对应的值</span></span><br><span class="line">print(Month.Jun.value)</span><br></pre></td></tr></table></figure><p>执行程序后，我们发现value属性是自动赋值的，而且是默认从1开始。那么如果我们想更精确的控制枚举类型的值，该如何做呢？枚举类需要继承<code>Enum</code>类，并用@unique来修饰此类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sex</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    male = <span class="number">0</span>  <span class="comment"># 0:男,1:女,2:未知</span></span><br><span class="line">    female = <span class="number">1</span></span><br><span class="line">    unknown = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;男性：&quot;</span>, Sex.male.value)</span><br><span class="line">print(<span class="string">&quot;女性：&quot;</span>, Sex.female.value)</span><br></pre></td></tr></table></figure><h2 id="4、继承和多态"><a href="#4、继承和多态" class="headerlink" title="4、继承和多态"></a>4、继承和多态</h2><p>在上面的例子，我们看到了Sex类<code>Sex(Enum)</code>的定义与之前的不同了，之前我们例子中，继承的都是object基类。在面向对象程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类，而被继承的class称为基类、父类或超类。让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为里氏替换原则。下面我们先看一个继承的例子。</p><p>先定义一个人的基类，每个人都有自己的名字和年龄属性，而且每个人都有走路和吃饭的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># person.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;人&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;返回名字&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;返回年龄&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;年龄可以更改&quot;&quot;&quot;</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;走&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._age &gt;= <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">&#x27;%s已经会走路了.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;%s还不会走路.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;吃&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._age &gt; <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">&#x27;%s可以吃肉了.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;%s只能吃奶.&#x27;</span> % self._name)</span><br></pre></td></tr></table></figure><p>定义妈妈类，妈妈类需要集成人的类，然后扩展一个工作的属性和工作的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mother.py</span></span><br><span class="line"><span class="keyword">from</span> person <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;妈妈&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, profession</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._profession = profession</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profession</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回职业&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._profession</span><br><span class="line"></span><br><span class="line"><span class="meta">    @profession.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profession</span>(<span class="params">self, profession</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;可以换工作&quot;&quot;&quot;</span></span><br><span class="line">        self._profession = profession</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;从事%s的%s正在努力的工作.&#x27;</span> % (self._profession, self._name))</span><br></pre></td></tr></table></figure><p>再定义一个宝宝类，宝宝类同样继承于人类，但是可以不做属性的扩展，只增加一个玩的方法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># baby.py</span></span><br><span class="line"><span class="keyword">from</span> person <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baby</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;宝宝&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self, game</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s岁的%s正在玩%s.&#x27;</span> % (self._age, self._name, game))</span><br></pre></td></tr></table></figure><p>测试，写一个main.py，其中引入妈妈类和宝宝类，运行程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> mother <span class="keyword">import</span> Mother</span><br><span class="line"><span class="keyword">from</span> baby <span class="keyword">import</span> Baby</span><br><span class="line"></span><br><span class="line">mom = Mother(<span class="string">&#x27;张大美&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;软件开发&#x27;</span>)</span><br><span class="line">mom.eat()</span><br><span class="line">mom.walk()</span><br><span class="line">mom.work()</span><br><span class="line"></span><br><span class="line">me = Baby(<span class="string">&#x27;郭小宝&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">me.eat()</span><br><span class="line">me.walk()</span><br><span class="line">me.play(<span class="string">&#x27;小汽车&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------</span></span><br><span class="line"><span class="comment"># 张大美可以吃肉了.</span></span><br><span class="line"><span class="comment"># 张大美已经会走路了.</span></span><br><span class="line"><span class="comment"># 从事软件开发的张大美正在努力的工作.</span></span><br><span class="line"><span class="comment"># 郭小宝只能吃奶.</span></span><br><span class="line"><span class="comment"># 郭小宝已经会走路了.</span></span><br><span class="line"><span class="comment"># 1岁的郭小宝正在玩小汽车.</span></span><br><span class="line"><span class="comment">#------------------------------</span></span><br></pre></td></tr></table></figure><p>从上面的运行结果中，就可以看出，子类继承了父类提供的属性和方法，还可以定义自己特有的属性和方法。因此，我们发现个问题，如果子类想重新设置父类中的内容该如何实现呢？其实子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。下面我们来重写一下walk和eat方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#person.py</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;人&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;返回名字&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;返回年龄&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;年龄可以更改&quot;&quot;&quot;</span></span><br><span class="line">        self._age = age</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;走&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;吃&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mother.py</span></span><br><span class="line"><span class="keyword">from</span> person <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;妈妈&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, profession</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._profession = profession</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profession</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回职业&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._profession</span><br><span class="line"></span><br><span class="line"><span class="meta">    @profession.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profession</span>(<span class="params">self, profession</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;可以换工作&quot;&quot;&quot;</span></span><br><span class="line">        self._profession = profession</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;从事%s的%s正在努力的工作.&#x27;</span> % (self._profession, self._name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s已经会走路了.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s可以吃肉了.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#baby.py</span></span><br><span class="line"><span class="keyword">from</span> person <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baby</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;宝宝&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self, game</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s岁的%s正在玩%s.&#x27;</span> % (self._age, self._name, game))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">walk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s刚刚学会走路.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s只能吃奶.&#x27;</span> % self._name)</span><br></pre></td></tr></table></figure><p>修改完成后，再次运行main.py看看效果吧。（读者自己动手试试）</p><p>上面的示例中，我们引入了abc模块，在Python3.4以后，声明抽象基类最简单的方式是子类话abc.ABC。让Person类继承ABC基类，使其成为一个抽象类，再使用@abstractmethod修饰符来达到抽象类的效果。如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。也就说Person类不能够被实例化，只能通过继承Person类，通过子类去实例化对象。继承了Person类后，被@abstractmethod修饰的方法，必须在子类中实现重写。这时，我们在main.py调用的时候，就表现出了多态行为（同样的方法做了不同的事情）。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>以上就是本文的全部内容，针对于python中面向对象编程内容，远不止笔者讲的这些。笔者只是讲解一些常用的知识点，至于更多关于面向对象相关的知识，读者可以自行学习，笔者只是起到抛转引入的作用。面向对象编程在整个编程生态中扮演者非常重要的角色，读者应该在不断的实践中，锻炼自己的抽象思维，要有万物皆对象的思想。在处理问题的时候，应该先分析有哪些对象，寻找出对象，才能更好的封装对象内的状态和约束，类与类之间的关系，以及让同一基类的不同子类的同一个动作可以表现出不同的行为。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;书接上文，本文继续对面向对象编程进行讲解。本文主要介绍面向对象编程的一些进阶内容，以及对面向对象编程的另外两个特性继承和多态进行详细的讲解。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://taotaolm.vip/categories/python/"/>
    
    
    <category term="面向对象" scheme="http://taotaolm.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程（一）</title>
    <link href="http://taotaolm.vip/2020/12/23/python/python-5/"/>
    <id>http://taotaolm.vip/2020/12/23/python/python-5/</id>
    <published>2020-12-23T01:09:49.000Z</published>
    <updated>2021-01-09T08:31:41.661Z</updated>
    
    <content type="html"><![CDATA[<p>学习python语言，就不可避免的要学会面向对象编程，作为一名程序员，就必须要了解什么是面向对象编程，什么是面向过程编程。其实是面向对象本身就是对面向过程的封装。那么什么是面向对象编程呢？笔者将用两篇文章对面向对象编程做一个简单的介绍。</p><a id="more"></a><h2 id="1、面向对象编程（OOP-Object-Oriented-Programming）"><a href="#1、面向对象编程（OOP-Object-Oriented-Programming）" class="headerlink" title="1、面向对象编程（OOP-Object Oriented Programming）"></a>1、面向对象编程（OOP-Object Oriented Programming）</h2><p>python语言是一门彻底的面向对象编程（opp）的语言，在python中万物皆对象，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。这么讲还是略显生涩，不是很好理解，下面我们通过一个小例子来简单理解一下面向过程和面向对象的区别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">场景描述：使用洗衣机洗衣服</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面向过程的解决办法</span></span><br><span class="line"><span class="number">1</span>、放入脏衣服</span><br><span class="line"><span class="number">2</span>、倒入洗衣液</span><br><span class="line"><span class="number">3</span>、给洗衣机注水</span><br><span class="line"><span class="number">4</span>、清洗衣服</span><br><span class="line"><span class="number">5</span>、漂洗衣服</span><br><span class="line"><span class="number">6</span>、烘干衣服</span><br><span class="line"><span class="number">7</span>、晾晒衣服</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面向对象的解决办法</span></span><br><span class="line">首先分析该场景中，存在的对象，可以分为人和洗衣机</span><br><span class="line">分析人可以做哪些动作。“放入脏衣服”、“倒入洗衣液”、“给洗衣机注水”、“晾晒衣服”。</span><br><span class="line">分析洗衣机可以做哪些动作。“清洗衣服”、“漂洗衣服”、“烘干衣服”</span><br><span class="line">最后执行</span><br><span class="line"><span class="number">1</span>、人.放入脏衣服</span><br><span class="line"><span class="number">2</span>、人.倒入洗衣液</span><br><span class="line"><span class="number">3</span>、人.给洗衣机注水</span><br><span class="line"><span class="number">4</span>、洗衣机.清洗衣服</span><br><span class="line"><span class="number">5</span>、洗衣机.漂洗衣服</span><br><span class="line"><span class="number">6</span>、洗衣机.烘干衣服</span><br><span class="line"><span class="number">7</span>、人.晾晒衣服</span><br></pre></td></tr></table></figure><p>看完这个例子有人会问，没有发现两种编程思想的区别啊，步骤也没有变化。其实解决同一个问题 ，面向对象编程就是先抽象出对象，然后用对象执行方法的方式解决问题。面向过程则是按照执行顺序，执行完每一个动作即可。</p><p>那么说了这么多，面向对象编程有什么优点呢？面向对象编程，易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护。</p><h2 id="2、类和实例"><a href="#2、类和实例" class="headerlink" title="2、类和实例"></a>2、类和实例</h2><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">类，定义了一个小汽车类</span></span><br><span class="line"><span class="string">抽象出小汽车有品牌、颜色、油耗的属性</span></span><br><span class="line"><span class="string">驾驶汽车方法</span></span><br><span class="line"><span class="string">开车速度方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为小汽车对象绑定brand（品牌）、color（颜色）、oil（油耗）两个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, brand, color, oil</span>):</span></span><br><span class="line">        self.brand = brand</span><br><span class="line">        self.color = color</span><br><span class="line">        self.oil = oil</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drive</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;驾驶汽车方法&quot;&quot;&quot;</span></span><br><span class="line">        use_oil_count = miles/<span class="number">100</span> * self.oil</span><br><span class="line">        print(<span class="string">&#x27;%s的%s小汽车，跑了%s公里，用了%s升汽油。&#x27;</span> %</span><br><span class="line">              (self.brand, self.color, miles, use_oil_count))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed</span>(<span class="params">self, speed_num</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;开车速度方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> speed_num &gt; <span class="number">100</span>:</span><br><span class="line">            print(<span class="string">&#x27;%s的%s小汽车，慢点开，你超速了.&#x27;</span> % (self.brand, self.color))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;道路千万条，安全第一条&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化car1对象，它是品牌是吉利，颜色是白色，油耗是5</span></span><br><span class="line">    car1 = Car(<span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    car1.drive(<span class="number">100</span>)  <span class="comment"># car1对象行驶了100公里，对car2对象没有影响</span></span><br><span class="line">    car1.speed(<span class="number">120</span>)  <span class="comment"># car1对象车速是120公里/时，对car2对象没有影响</span></span><br><span class="line">    <span class="comment"># 实例化car2对象，它是品牌是丰田，颜色是黑色，油耗是4</span></span><br><span class="line">    car2 = Car(<span class="string">&#x27;丰田&#x27;</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">    car2.drive(<span class="number">50</span>)  <span class="comment"># car2对象行驶了50公里，对car1对象没有影响</span></span><br><span class="line">    car2.speed(<span class="number">80</span>)  <span class="comment"># car2对象车速是80公里/时，对car1对象没有影响</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>说明：示例代码中，值得注意的是特殊方法“__init__”前后分别有两个下划线！！！且第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。</p></blockquote><h2 id="3、访问限制"><a href="#3、访问限制" class="headerlink" title="3、访问限制"></a>3、访问限制</h2><p>如果我们想访问Car类中的brand属性，该如何实现呢？只需要使用<code>.</code>来访问对象的属性即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化car1对象，它是品牌是吉利，颜色是白色，油耗是5</span></span><br><span class="line">    car1 = Car(<span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    print(<span class="string">&quot;car1对象的品牌是&quot;</span>+car1.brand)    <span class="comment"># car1对象的品牌是吉利</span></span><br></pre></td></tr></table></figure><p>当然，我们也可以使用以下函数的方式来访问属性：</p><ul><li>getattr(obj, name[, default]) : 访问对象的属性。</li><li>hasattr(obj,name) : 检查是否存在一个属性。</li><li>setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。</li><li>delattr(obj, name) : 删除属性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">hasattr</span>(car1, <span class="string">&#x27;price&#x27;</span>))   <span class="comment"># 如果存在 &#x27;price&#x27; 属性返回 True。</span></span><br><span class="line"><span class="built_in">setattr</span>(car1, <span class="string">&#x27;price&#x27;</span>, <span class="number">120000</span>)  <span class="comment"># 添加属性 &#x27;price&#x27; 值为 120000</span></span><br><span class="line">print(<span class="built_in">getattr</span>(car1, <span class="string">&#x27;price&#x27;</span>))   <span class="comment"># 返回 &#x27;price&#x27; 属性的值</span></span><br><span class="line"><span class="built_in">delattr</span>(car1, <span class="string">&#x27;price&#x27;</span>)          <span class="comment"># 删除属性 &#x27;price&#x27;</span></span><br></pre></td></tr></table></figure><p>外部代码可以随意访问属性，且修改属性的状态，那么在实际开发中，我们就有不让外部随意访问且修改属性状态的需求。因此python将属性分为公有属性、受保护属性、私有属性。</p><p>（1）公有属性：共享的属性，一般的属性。例如name，表示公有属性。<br>（2）受保护属性：受到保护的属性，用_前缀表示。例如_age，表示受保护属性。<br>（3）私有属性：防止外界直接访问，防止被子类同名称属性覆盖，进行数据保护和数据过滤，用__（两个下划线）前缀表示，实例不能访问私有属性。例如__sex，表示私有属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, brand, color, oil</span>):</span></span><br><span class="line">        self._brand = brand</span><br><span class="line">        self.__color = color</span><br><span class="line">        self.oil = oil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化car1对象，它是品牌是吉利，颜色是白色，油耗是5</span></span><br><span class="line">    car1 = Car(<span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    print(<span class="string">&quot;car1对象的品牌是&quot;</span>+car1._brand)   <span class="comment">#car1对象的品牌是吉利</span></span><br><span class="line">    print(<span class="string">&quot;car1对象的颜色是&quot;</span>+car1.__color)  <span class="comment">#AttributeError: &#x27;Car&#x27; object has no attribute &#x27;__color&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>修改完成后，发现受保护的属性_brand依然可以访问，私有属性__color无法访问了。这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。但是如果外部代码要获取__color属性怎么办？可以给Car类增加get_color方法用于获取，增加set_color方法用于设置值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, brand, color, oil</span>):</span></span><br><span class="line">        self._brand = brand</span><br><span class="line">        self.__color = color</span><br><span class="line">        self.oil = oil</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_color</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取颜色的方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.__color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_color</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置颜色的方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">str</span>):</span><br><span class="line">            self.__color = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;error：输入类型与预设类型不一致&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化car1对象，它是品牌是吉利，颜色是白色，油耗是5</span></span><br><span class="line">    car1 = Car(<span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    print(<span class="string">&quot;car1对象的原来的颜色是&quot;</span>+car1.get_color())  <span class="comment"># 获取颜色属性</span></span><br><span class="line">    car1.set_color(<span class="string">&#x27;蓝色&#x27;</span>)  <span class="comment"># 设置颜色属性</span></span><br><span class="line">    print(<span class="string">&quot;car1对象的改变后的颜色是&quot;</span>+car1.get_color())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>提供了set和get方法，是可以操作属性的值了，但是用起来稍显笨拙。下面我们介绍一个 @property来解决这个问题。Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用。改造后代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, brand, color, oil</span>):</span></span><br><span class="line">        self._brand = brand</span><br><span class="line">        self.__color = color</span><br><span class="line">        self.oil = oil</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取颜色的方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.__color</span><br><span class="line"></span><br><span class="line"><span class="meta">    @color.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置颜色的方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">str</span>):</span><br><span class="line">            self.__color = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;error：输入类型与预设类型不一致&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化car1对象，它是品牌是吉利，颜色是白色，油耗是5</span></span><br><span class="line">    car1 = Car(<span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    print(<span class="string">&quot;car1对象的原来的颜色是&quot;</span>+car1.color)  <span class="comment"># 获取颜色属性</span></span><br><span class="line">    car1.color = <span class="string">&#x27;蓝色&#x27;</span>  <span class="comment"># 设置颜色属性</span></span><br><span class="line">    print(<span class="string">&quot;car1对象的改变后的颜色是&quot;</span>+car1.color)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>通过<code>@property</code>装饰之后，使用起来就更加的简单便捷了。看到这里，一定有读者会有疑问了，既然对私有属性都提供了set和get方法，那直接把私有属性设置成公有属性岂不是更方便。那么给私有属性设置set和get方法的目的到底是什么呢？</p><ul><li>实现对对象属性的更好的控制。把属性私有化，使用管理get/set方法来实现对属性的使用控制，如果有get/set方法，则可以访问，只有set方法则只有写的权限，只有get方法则只有读的权限，都没有则没有对属性的控制权限。</li><li>方便的增加对使用对象属性的约束。我们可以向get/set方法中添加额外的业务处理逻辑，更好的控制属性的使用，避免一些安全问题和错误。</li><li>我们可以通过改变get/set方法的内部实现更加灵活的控制对象属性的访问。</li></ul><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>面向对象的三大特性：封装、继承和多态。本文的内容主要是讲解封装的特性，继承和多态两个特性将在下一篇文章中讲解。个人认为，封装就是将抽象出对象的属性和方法，尽量隐藏一切可以隐藏的内容，对外提供简单、易用的方法。外部在调用对象的方法时，并不关心方法内部的实现逻辑和处理。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习python语言，就不可避免的要学会面向对象编程，作为一名程序员，就必须要了解什么是面向对象编程，什么是面向过程编程。其实是面向对象本身就是对面向过程的封装。那么什么是面向对象编程呢？笔者将用两篇文章对面向对象编程做一个简单的介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://taotaolm.vip/categories/python/"/>
    
    
    <category term="面向对象" scheme="http://taotaolm.vip/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>函数与模块介绍</title>
    <link href="http://taotaolm.vip/2020/12/22/python/python-4/"/>
    <id>http://taotaolm.vip/2020/12/22/python/python-4/</id>
    <published>2020-12-22T09:22:40.000Z</published>
    <updated>2021-01-09T08:30:48.929Z</updated>
    
    <content type="html"><![CDATA[<p>在《python中的分支结构与循环结构》文章的最后，我们写了扑克牌比大小的游戏，从代码上看，我们把所有的逻辑都写在了一起，显然这样的写法是不够美观，而且可读性也差。那么如何提高我们写的代码的可读性呢？本文将讲解一下python中的函数和模块这两个功能。在讲解函数和模块时，我们也会介绍一下全局变量和局部变量的区别。</p><a id="more"></a><h2 id="1、函数的定义"><a href="#1、函数的定义" class="headerlink" title="1、函数的定义"></a>1、函数的定义</h2><p>函数就是将某块重复调用的代码进行封装起来，在其他需要使用的地方调用此函数。函数的目的就是提高编写的效率和代码的复用性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">    代码</span><br><span class="line">    <span class="keyword">return</span> 变量</span><br></pre></td></tr></table></figure><p>在Python使用def开始函数定义，紧接着是函数名，括号内部为函数的参数，内部为函数的具体功能实现代码。return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。<br>调用函数，我们在其他地方就可以通过“函数名()”即可完成调用。<br>根据传参的类别，我们把函数分为四类：</p><ul><li>必备参数类型函数</li><li>默认参数类型函数</li><li>关键字参数类型函数</li><li>不定长参数类型函数</li></ul><h3 id="1-1、必备参数类型函数"><a href="#1-1、必备参数类型函数" class="headerlink" title="1.1、必备参数类型函数"></a>1.1、必备参数类型函数</h3><p>必备参数类型函数就是说必须须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;求和&quot;&quot;&quot;</span></span><br><span class="line">    c = a + b</span><br><span class="line">    print(<span class="string">&quot;a + b =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">101</span>, <span class="number">20</span>)   <span class="comment"># a + b = 121</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果只传一个参数，则报错</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">101</span>)   <span class="comment"># TypeError: sum() missing 1 required positional argument: &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-2、默认参数类型函数"><a href="#1-2、默认参数类型函数" class="headerlink" title="1.2、默认参数类型函数"></a>1.2、默认参数类型函数</h3><p>调用函数时，默认参数的值如果没有传入，则被认为是默认值。上面的例子，如果给b一个默认值是1，那么在调用sum(101)就不会报错，且打印出 a + b = 102。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;求和&quot;&quot;&quot;</span></span><br><span class="line">    c = a + b</span><br><span class="line">    print(<span class="string">&quot;a + b =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">101</span>)   <span class="comment"># a + b = 102</span></span><br></pre></td></tr></table></figure><h3 id="1-3、关键字参数类型函数"><a href="#1-3、关键字参数类型函数" class="headerlink" title="1.3、关键字参数类型函数"></a>1.3、关键字参数类型函数</h3><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为Python解释器能够用参数名匹配参数值。简而言之，就是调用函数时，根据参数的名字进行传参，无论顺序如何，只要参数的名字对就可以调用成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;求和&quot;&quot;&quot;</span></span><br><span class="line">    c = a + b</span><br><span class="line">    print(<span class="string">&quot;a + b =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数，a和b换了顺序，但是依然可以调用</span></span><br><span class="line"><span class="built_in">sum</span>(b=<span class="number">1</span>,a=<span class="number">2</span>)  <span class="comment"># a + b = 3</span></span><br></pre></td></tr></table></figure><h3 id="1-4、不定长参数类型函数"><a href="#1-4、不定长参数类型函数" class="headerlink" title="1.4、不定长参数类型函数"></a>1.4、不定长参数类型函数</h3><p>不能和定义时的参数位置相对应参数，放入一个特定的数据结构中。在参数前面增加星号，会存放所有未命名的变量参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b, *args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;求和&quot;&quot;&quot;</span></span><br><span class="line">    c = a + b</span><br><span class="line">    print(<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        c += item</span><br><span class="line">    print(<span class="string">&quot;a + b + ... =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;  a + b + ... = 21</span></span><br></pre></td></tr></table></figure><p>打印了一下参数类型，发现不定长参数是一个元祖。</p><h2 id="2、变量的作用域"><a href="#2、变量的作用域" class="headerlink" title="2、变量的作用域"></a>2、变量的作用域</h2><p>一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。两种最基本的变量作用域如下：</p><ul><li>全局变量：既能在一个函数中使用，也能在其他的函数中使用，能够在所有的函数中进行访问。</li><li>局部变量：局部变量就是在函数内部定义的变量，其作用范围是这个函数内部，在函数的外部是不能使用的。局部变量主要是为了临时保存数据需要在函数中定义变量来进行存储，当函数调用时，局部变量被创建，当函数调用完成后这个变量就不能够使用了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;求和&quot;&quot;&quot;</span></span><br><span class="line">    c = a + b  <span class="comment"># 局部的c的值就是a+b的和</span></span><br><span class="line">    print(<span class="string">&quot;局部的c：&quot;</span>, c)</span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">print(<span class="string">&quot;全局的c：&quot;</span>, c)  <span class="comment"># 全局的c是没有变化的</span></span><br></pre></td></tr></table></figure><h2 id="3、优化程序"><a href="#3、优化程序" class="headerlink" title="3、优化程序"></a>3、优化程序</h2><p>在开篇我们就提到了扑克牌比大小游戏，通过上面对函数的学习，我们来改造一下这段代码。改造代码前，我们需要对代码进行分析，哪些代码需要提取出来作为一个函数存在。此过程不在本文中讲解，笔者直接将改造后的代码发出来，大家自行学习，此代码仅供参考。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shuffled_deck</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化扑克牌，并洗牌&quot;&quot;&quot;</span></span><br><span class="line">   <span class="comment"># 花色suits和序号</span></span><br><span class="line">    suits = &#123;<span class="string">&#x27;♣&#x27;</span>, <span class="string">&#x27;♠&#x27;</span>, <span class="string">&#x27;♦&#x27;</span>, <span class="string">&#x27;♥&#x27;</span>&#125;</span><br><span class="line">    ranks = &#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;A&#x27;</span>&#125;</span><br><span class="line">    deck = []</span><br><span class="line">    <span class="comment"># 创建一副52张的扑克牌</span></span><br><span class="line">    <span class="keyword">for</span> suit <span class="keyword">in</span> suits:</span><br><span class="line">        <span class="keyword">for</span> rank <span class="keyword">in</span> ranks:</span><br><span class="line">            deck.append(suit + <span class="string">&#x27; &#x27;</span> + rank)</span><br><span class="line">    random.shuffle(deck)</span><br><span class="line">    <span class="keyword">return</span> deck</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_card</span>(<span class="params">deck</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;发牌，从最后一张牌&quot;&quot;&quot;</span></span><br><span class="line">    card = deck.pop()</span><br><span class="line">    <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">win_or_lose</span>(<span class="params">money, debt, house_card, player_card</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断输赢&quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&#x27;开牌：庄家%s，玩家%s&#x27;</span> % (house_card, player_card))</span><br><span class="line">    <span class="comment"># 扑克牌对应的值</span></span><br><span class="line">    values = &#123;<span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>,</span><br><span class="line">              <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;10&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;J&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;K&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;A&#x27;</span>: <span class="number">11</span>&#125;</span><br><span class="line">    house_value = values[house_card[<span class="number">2</span>:]]</span><br><span class="line">    player_value = values[player_card[<span class="number">2</span>:]]</span><br><span class="line">    <span class="keyword">if</span> house_value &gt;= player_value:</span><br><span class="line">        print(<span class="string">&#x27;庄家胜!&#x27;</span>)</span><br><span class="line">        money -= debt</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;玩家胜!&#x27;</span>)</span><br><span class="line">        money += debt</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_casino</span>(<span class="params">money</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;离开赌场&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> money &gt; <span class="number">1000</span>:</span><br><span class="line">        print(<span class="string">&#x27;恭喜你，你赢钱了!&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> money == <span class="number">1000</span>:</span><br><span class="line">        print(<span class="string">&#x27;白来一趟，没输没赢!&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> money &gt; <span class="number">0</span> <span class="keyword">and</span> money &lt; <span class="number">1000</span>:</span><br><span class="line">        print(<span class="string">&#x27;输钱了，回家努力上班吧!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;你破产了，以后吃土吧!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span>  <span class="comment"># 给玩家1000块钱</span></span><br><span class="line"><span class="comment"># 开始游戏</span></span><br><span class="line"><span class="keyword">while</span> money &gt; <span class="number">0</span>:</span><br><span class="line">    deck = get_shuffled_deck()  <span class="comment"># 换一副新牌</span></span><br><span class="line">    print(<span class="string">&#x27;你的总资产为:&#x27;</span>, money)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        debt = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请下注: &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; debt &lt;= money:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 发牌</span></span><br><span class="line">    house_card = deal_card(deck)   <span class="comment"># 给庄家一张牌</span></span><br><span class="line">    player_card = deal_card(deck)  <span class="comment"># 给玩家一张牌</span></span><br><span class="line">    <span class="comment"># 比较牌的大小</span></span><br><span class="line">    money = win_or_lose(money, debt, house_card, player_card)</span><br><span class="line">    <span class="keyword">if</span> money &gt; <span class="number">0</span>:</span><br><span class="line">        answer = <span class="built_in">input</span>(<span class="string">&#x27;是否继续下注（y/n，缺省为y）：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> answer <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 离开赌场</span></span><br><span class="line">leave_casino(money)</span><br></pre></td></tr></table></figure><h2 id="4、模块介绍"><a href="#4、模块介绍" class="headerlink" title="4、模块介绍"></a>4、模块介绍</h2><h3 id="4-1、导入模块"><a href="#4-1、导入模块" class="headerlink" title="4.1、导入模块"></a>4.1、导入模块</h3><p>在上面的代码中，第一句话就是<code>import random</code>笔者还解释过这行代码的含义。下面我们就来说说它的含义是什么。这就是python语言中的模块，模块让你能够有逻辑地组织你的Python代码段。把相关的代码分配到一个模块里能让你的代码更好用，更易懂。模块能定义函数，类和变量，模块里也能包含可执行的代码。模块还能有效的让我们避免变量、函数的命名冲突。</p><p>下面看一个例子，首先在文件夹中创建两个文件，一个是hello.py，一个是test.py。在hello.py中定义个函数，然后在test.py中引入hello模块，然后调用hello.py中的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;hello,&quot;</span> + name)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> hello</span><br><span class="line"></span><br><span class="line">hello.say_hello(<span class="string">&quot;alex&quot;</span>)</span><br><span class="line"></span><br><span class="line">----------------------------分割线，给模块起别名-----------------------------</span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">as</span> h  <span class="comment"># 通过as关键字，起别名</span></span><br><span class="line"></span><br><span class="line">h.say_hello(<span class="string">&quot;alex&quot;</span>)</span><br></pre></td></tr></table></figure><p>上面的例子是引入模块的所有内容，那么有人会问，如果我只想引入模块中的部分内容，该怎么办呢？下面我们来讲解一下from … import。</p><h3 id="4-2、from-…-import"><a href="#4-2、from-…-import" class="headerlink" title="4.2、from … import"></a>4.2、from … import</h3><p>在hello.py模块中，我们写三个函数，分别是say_hello、say_goodbye、say_soming。然后我们在test.py模块中，只引入其中的两个即可。代码示例如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;hello,&quot;</span> + name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;goodbye,&quot;</span> + name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_soming</span>():</span></span><br><span class="line">    print(<span class="string">&quot;talking about football&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> say_hello, say_soming </span><br><span class="line"></span><br><span class="line">say_hello(<span class="string">&quot;alex&quot;</span>)</span><br><span class="line">say_soming()</span><br><span class="line"></span><br><span class="line">----------------------------分割线，给模块起别名-----------------------------</span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> say_hello <span class="keyword">as</span> hello , say_soming <span class="keyword">as</span> soming<span class="comment"># 通过as关键字，起别名</span></span><br><span class="line"></span><br><span class="line">hello(<span class="string">&quot;alex&quot;</span>)</span><br><span class="line">soming()</span><br></pre></td></tr></table></figure><p>也可以使用<code>from hello import *</code>，引入hello模块的所有内容，但是在开发过程中，不建议直接导入 *，因为可读性差，且极容易出现变量重名。</p><h3 id="4-3、自执行与模块"><a href="#4-3、自执行与模块" class="headerlink" title="4.3、自执行与模块"></a>4.3、自执行与模块</h3><p>上面已经说明，导入模块后，可以使用模块内的内容，那么需要说明的是，如果我们导入的模块除了定义函数之外还中有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此，如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是“__main__”。</p><p>比如说，我们在hello.py中，想打印一句话，那么就直接加入到hello.py文件中即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;hello,&quot;</span> + name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;goodbye,&quot;</span> + name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_soming</span>():</span></span><br><span class="line">    print(<span class="string">&quot;talking about football&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;我是hello模块，我不希望引用我的模块，看到我说的这句话。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行test.py  控制台打印出&quot;我是hello模块，我不希望引用我的模块，看到我说的这句话。&quot;</span></span><br></pre></td></tr></table></figure><p>其实我们是不希望看到打印出来的这句话，那么我们只需要使用一个判断，将其包装一下即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&quot;我是hello模块，我不希望引用我的模块，看到我说的这句话。&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样，在执行test.py就不会打印这句话了。然而当我们执行hello.py模块时，则会打印这句话。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>以上就是本文讲解的所有内容，笔者比较粗浅的讲解下函数和模块的使用，更深入的了解及使用还需要读者自己在实践中去发现，去学习。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在《python中的分支结构与循环结构》文章的最后，我们写了扑克牌比大小的游戏，从代码上看，我们把所有的逻辑都写在了一起，显然这样的写法是不够美观，而且可读性也差。那么如何提高我们写的代码的可读性呢？本文将讲解一下python中的函数和模块这两个功能。在讲解函数和模块时，我们也会介绍一下全局变量和局部变量的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://taotaolm.vip/categories/python/"/>
    
    
    <category term="函数定义" scheme="http://taotaolm.vip/tags/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/"/>
    
    <category term="模块介绍" scheme="http://taotaolm.vip/tags/%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>python中的分支结构与循环结构</title>
    <link href="http://taotaolm.vip/2020/12/22/python/python-3/"/>
    <id>http://taotaolm.vip/2020/12/22/python/python-3/</id>
    <published>2020-12-22T01:08:45.000Z</published>
    <updated>2021-01-01T06:19:14.859Z</updated>
    
    <content type="html"><![CDATA[<p>前两篇文章中，我们写的代码都是按顺序执行的，这种代码结构称之为顺序结构。那么下面我们就要介绍一下其他的代码结构，本文我们主要介绍分支结构和循环结构。在开始之前，我们先来看一个经典的程序员笑话。说“老婆给当程序员的老公打电话，下班时顺路买十个包子，如果看到卖西瓜的，买一个。当晚老公手捧一个包子进了家门…老婆怒道：你怎么只买一个包子？老公甚恐，喃喃道：因为我真看到卖西瓜的了。”这个笑话就是一个典型的分支结构的案例。</p><a id="more"></a><h2 id="1、分支结构"><a href="#1、分支结构" class="headerlink" title="1、分支结构"></a>1、分支结构</h2><p>顺序结构就是按顺序执行代码，分支结构分为单层和嵌套模式。单层模式就是通过条件判断，满足条件1则执行语句1，满足条件2则执行条件2。嵌套模式就是多个单层模式的叠加使用。</p><img src="ifelse.png" style="zoom:75%;" /><p>在Python中，要构造分支结构可以使用if、elif和else关键字。所谓关键字就是有特殊含义的单词，在《python语言基础介绍》文章中，我们说过有特殊含义的单词是不可以做为变量名。那么下面我们就使用if、elif和else关键字来实现一下引言中程序员买西瓜的笑话。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">baozi_count = <span class="number">10</span></span><br><span class="line">selling_watermelon_flag = <span class="built_in">input</span>(<span class="string">&#x27;是否看到卖西瓜的摊位: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> selling_watermelon_flag == <span class="string">&#x27;是&#x27;</span>:   <span class="comment">#如果看到了卖西瓜的摊位</span></span><br><span class="line">    baozi_count = <span class="number">1</span>       <span class="comment">#包子数量设置为1</span></span><br><span class="line"><span class="keyword">elif</span> selling_watermelon_flag == <span class="string">&#x27;否&#x27;</span>:  <span class="comment">#如果没看到卖西瓜的摊位 </span></span><br><span class="line">    baozi_count = <span class="number">10</span>                   <span class="comment">#包子数量设置为10</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;请回答是否&#x27;</span>)  </span><br><span class="line">print(<span class="string">&#x27;老公买了&#x27;</span> + <span class="built_in">str</span>(baozi_count) + <span class="string">&#x27;个包子。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行程序，看到控制台输出“是否看到卖西瓜的摊位:”，输入“是”，回车这会输出“老公买了1个包子。”从上面的例子可以看出，python语言与java语言的规则不相同，它没有使用花括号将if语句内的内容包裹起来，而是采用冒号加缩进的方式来区分代码的层次结构。在if关键字之后是条件判断，在条件判断之后使用冒号，换行缩进4个字符，来编写if句柄下的代码内容。如果多行代码，只需要使用同样的缩进格式即可。换而言之，相同的缩进表示它们属于同一块代码。</p><p>当然分支结构的也是可以嵌套使用的，下面我们看一个嵌套使用的例子。输入一个数字，判断其数字是正数，负数，还是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个数字: &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="built_in">str</span>(num) + <span class="string">&quot;是正数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        print(<span class="built_in">str</span>(num) + <span class="string">&quot;是零&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="built_in">str</span>(num) + <span class="string">&quot;是负数&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="built_in">str</span>(num) + <span class="string">&quot;未知&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2、循环结构"><a href="#2、循环结构" class="headerlink" title="2、循环结构"></a>2、循环结构</h2><p>循环结构，就是要程序不断重复的做动作。在上学时期，最怕老师布置作业时，要求对课文抄10遍，其实这就是一个循环的过程。在python中，构造循环结构有两种方法，一种是使用for-in循环，一种是使用while循环。</p><h3 id="2-1、for-in循环"><a href="#2-1、for-in循环" class="headerlink" title="2.1、for-in循环"></a>2.1、for-in循环</h3><p>在之前的课程中，我们已经看到了for-in的使用，就是循环展示元祖的中的元素信息。现在我们在拿出来执行一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">year_t = (<span class="string">&#x27;2020&#x27;</span>, [<span class="string">&quot;January&quot;</span>,<span class="string">&quot;February&quot;</span>,<span class="string">&quot;March&quot;</span>,<span class="string">&quot;April&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;June&quot;</span>,<span class="string">&quot;July&quot;</span>,<span class="string">&quot;August&quot;</span>,<span class="string">&quot;September&quot;</span>,<span class="string">&quot;October&quot;</span>,<span class="string">&quot;November&quot;</span>,<span class="string">&quot;December&quot;</span>])</span><br><span class="line"><span class="comment"># 遍历元组中的值</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> year_t:  <span class="comment"># for-in循环</span></span><br><span class="line">    print(member)</span><br></pre></td></tr></table></figure><p>从上面的代码中，可以看出，循环体执行了两次，分别打印出了元祖的两个元素。我们发现元祖中的第二个元素是个list，那么如果想把第二个元素中的每个元素也打印出来，该如何实现呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">year_t = (<span class="string">&#x27;2020&#x27;</span>, [<span class="string">&quot;January&quot;</span>, <span class="string">&quot;February&quot;</span>, <span class="string">&quot;March&quot;</span>, <span class="string">&quot;April&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;June&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;July&quot;</span>, <span class="string">&quot;August&quot;</span>, <span class="string">&quot;September&quot;</span>, <span class="string">&quot;October&quot;</span>, <span class="string">&quot;November&quot;</span>, <span class="string">&quot;December&quot;</span>])</span><br><span class="line"><span class="comment"># 遍历元组中的值</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> year_t:  <span class="comment"># for-in循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(member, <span class="built_in">list</span>):  <span class="comment"># 判断对象是不是list</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> member:  <span class="comment"># 使用for-in遍历list</span></span><br><span class="line">            print(item)    <span class="comment"># 打印list中的元素</span></span><br><span class="line">    <span class="keyword">else</span>:    <span class="comment"># 不是list，直接打印元素</span></span><br><span class="line">        print(member)</span><br></pre></td></tr></table></figure><p>现在我们对for-in循环有了初步的了解，下面我们来看一个练习。使用for-in循环实现1到100相加的总和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + num</span><br><span class="line">print(<span class="string">&quot;1到100相加的总和是：&quot;</span>, <span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>此处，使用到了range函数，那么我们来简单认识一下range函数。从单词的字面意思就可以看出，它是一个范围或者区间的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(start, stop[, step])  <span class="comment">#需要注意的是start是闭区间，stop是开区间</span></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">101</span>) <span class="comment">#可以用来产生0到100范围的整数，需要注意的是取不到101</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>)<span class="comment">#可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>)<span class="comment">#可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>)<span class="comment">#可以用来产生1到100的偶数，其中2是步长，即每次数值递增的值</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><h3 id="2-2、while循环"><a href="#2-2、while循环" class="headerlink" title="2.2、while循环"></a>2.2、while循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用while循环。while循环通过一个能够产生或转换出bool值的表达式来控制循环，表达式的值为True则继续循环；表达式的值为False则结束循环。我们也可以通过break来结束本次循环，需要注意的是break只能终止它所在的循环，如果是循环嵌套，我们就需要看好使用break的位置。除了break之外，还有另一个关键字是continue，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。下面我们通过一个例子详细的讲解一下while循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>, num = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num += <span class="number">1</span>  <span class="comment"># num + 1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">100</span>:  <span class="comment"># 判断num是否大于100，如果大于100，则跳出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 对2求余，如果是0，则是偶数，进行相加操作</span></span><br><span class="line">        <span class="built_in">sum</span> += num</span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># 不是偶数，则进行下一轮循环</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">print(<span class="string">&quot;1到100的偶数相加的总和是：&quot;</span>, <span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h2 id="3、程序逻辑"><a href="#3、程序逻辑" class="headerlink" title="3、程序逻辑"></a>3、程序逻辑</h2><p>通过这两天的学习，我们初步掌握了一些python的基础用法，所以我们现在结合所学的知识，做一个简单的实践。学习编程时，总会说到锻炼逻辑思维，那么到底什么才是逻辑思维呢？其实就是把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成代码的能力，而这件事情必须通过大量的练习才能达成。</p><p>下面我们来一起开发一个小游戏程序。一副扑克牌，庄家抽取一张，玩家抽取一张，然后比大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 初始化包括52张扑克牌的列表，并混排后返回，表示一副洗好的扑克牌</span></span><br><span class="line"><span class="comment"># 花色suits和序号</span></span><br><span class="line">suits = &#123;<span class="string">&#x27;♣&#x27;</span>, <span class="string">&#x27;♠&#x27;</span>, <span class="string">&#x27;♦&#x27;</span>, <span class="string">&#x27;♥&#x27;</span>&#125;</span><br><span class="line">ranks = &#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;A&#x27;</span>&#125;</span><br><span class="line">deck = []</span><br><span class="line"><span class="comment"># 创建一副52张的扑克牌</span></span><br><span class="line"><span class="keyword">for</span> suit <span class="keyword">in</span> suits:</span><br><span class="line">    <span class="keyword">for</span> rank <span class="keyword">in</span> ranks:</span><br><span class="line">        deck.append(suit + <span class="string">&#x27; &#x27;</span> + rank)</span><br><span class="line"><span class="comment"># 扑克牌对应的值</span></span><br><span class="line">values = &#123;<span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>,</span><br><span class="line">          <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;10&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;J&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;K&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;A&#x27;</span>: <span class="number">11</span>&#125;</span><br><span class="line">money = <span class="number">1000</span>  <span class="comment"># 给玩家1000块钱</span></span><br><span class="line"><span class="comment"># 开始游戏</span></span><br><span class="line">random.shuffle(deck)  <span class="comment"># 洗牌</span></span><br><span class="line"><span class="keyword">while</span> money &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&#x27;你的总资产为:&#x27;</span>, money)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        debt = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请下注: &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; debt &lt;= money:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 发牌</span></span><br><span class="line">    house = deck.pop()   <span class="comment"># 给庄家一张牌</span></span><br><span class="line">    player = deck.pop()  <span class="comment"># 给玩家一张牌</span></span><br><span class="line">    <span class="comment"># 比较牌的大小</span></span><br><span class="line">    house_value = values[house[<span class="number">2</span>:]]</span><br><span class="line">    player_value = values[player[<span class="number">2</span>:]]</span><br><span class="line">    print(<span class="string">&#x27;开牌：庄家%s，玩家%s&#x27;</span> % (house, player))</span><br><span class="line">    <span class="keyword">if</span> house_value &gt;= player_value:</span><br><span class="line">        print(<span class="string">&#x27;庄家胜!&#x27;</span>)</span><br><span class="line">        money -= debt</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;玩家胜!&#x27;</span>)</span><br><span class="line">        money += debt</span><br><span class="line">    <span class="keyword">if</span> money &gt; <span class="number">0</span>:</span><br><span class="line">        answer = <span class="built_in">input</span>(<span class="string">&#x27;是否继续下注（y/n，缺省为y）：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> answer <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> money &gt; <span class="number">1000</span>:</span><br><span class="line">    print(<span class="string">&#x27;恭喜你，你赢钱了!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> money == <span class="number">1000</span>:</span><br><span class="line">    print(<span class="string">&#x27;白来一趟，没输没赢!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> money &gt; <span class="number">0</span> <span class="keyword">and</span> money &lt; <span class="number">1000</span>:</span><br><span class="line">    print(<span class="string">&#x27;输钱了，回家努力上班吧!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;你破产了，以后吃土吧!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>把程序运行起来，试试你的手气吧！</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>本文主要讲解python中的分支结构和循环结构，其实学过其他编程语言的读者发现，python的语法规则更为简洁一点，可读性也更强一些，对于有编程基础的读者，本章的内容并不难理解。本文的最后写了个小游戏，在下一章中，我们会对此段程序进行改造，主要是通过函数进行封装，敬请关注后续文章。谢谢大家。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前两篇文章中，我们写的代码都是按顺序执行的，这种代码结构称之为顺序结构。那么下面我们就要介绍一下其他的代码结构，本文我们主要介绍分支结构和循环结构。在开始之前，我们先来看一个经典的程序员笑话。说“老婆给当程序员的老公打电话，下班时顺路买十个包子，如果看到卖西瓜的，买一个。当晚老公手捧一个包子进了家门…老婆怒道：你怎么只买一个包子？老公甚恐，喃喃道：因为我真看到卖西瓜的了。”这个笑话就是一个典型的分支结构的案例。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://taotaolm.vip/categories/python/"/>
    
    
    <category term="分支结构" scheme="http://taotaolm.vip/tags/%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
    
    <category term="循环结构" scheme="http://taotaolm.vip/tags/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>python语言基础介绍</title>
    <link href="http://taotaolm.vip/2020/12/21/python/python-2/"/>
    <id>http://taotaolm.vip/2020/12/21/python/python-2/</id>
    <published>2020-12-21T03:27:57.000Z</published>
    <updated>2021-01-09T08:28:47.544Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中，我们打印出了“Hello Python!”的信息。仅仅打印一句话，显然是不够的，那么就让我们一起来学习一下python语言中的数据类型和命名规则。</p><a id="more"></a><h2 id="1、变量和数据类型"><a href="#1、变量和数据类型" class="headerlink" title="1、变量和数据类型"></a>1、变量和数据类型</h2><p>一说到变量，从字面意思解释就是可以变化的数据。在程序设计中，变量是一种存储数据的载体。变量的值在程序运行期间是可以被读取和修改。Python中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。在Python中，变量就是变量，它没有类型，我们所说的“类型”是变量所指的内存中对象的类型。</p><p>说到类型，我们就要介绍一下在Python3中有六种标准数据类型，它们分别是数字类型、字符串类型、列表、元组、字典、集合这六种类型。下面我们详细说下这六种数据类型。</p><h3 id="1-1、数字类型"><a href="#1-1、数字类型" class="headerlink" title="1.1、数字类型"></a>1.1、数字类型</h3><p>数字类型分为整型（int）、浮点型（float）、布尔型（bool）、复数型（complex）。</p><ul><li>整型：可以处理任意大小的整数。</li><li>浮点型：浮点数也就是小数，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如123.456）之外还支持科学计数法（如1.23456e2）。</li><li>布尔型：布尔值只有True、False两种值。</li><li>复数型：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的i换成了j。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = <span class="number">10</span>, <span class="number">123.456</span>, <span class="literal">False</span>, <span class="number">3</span>+<span class="number">5j</span></span><br><span class="line">print(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(d))  <span class="comment"># &lt;class &#x27;complex&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2、字符串类型"><a href="#1-2、字符串类型" class="headerlink" title="1.2、字符串类型"></a>1.2、字符串类型</h3><p>字符串是以单引号或双引号括起来的任意文本，比如’Hello Python!’和”Hello Python!”,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="string">&#x27;hello python!&#x27;</span></span><br><span class="line">hello1 = <span class="string">&quot;hello python!&quot;</span></span><br><span class="line">hello2 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello python!</span></span><br><span class="line"><span class="string">My name is alex.&quot;&quot;&quot;</span></span><br><span class="line">print(<span class="string">&#x27;字符串:&#x27;</span>, hello)</span><br><span class="line">print(<span class="string">&#x27;字符串1:&#x27;</span>, hello1)</span><br><span class="line">print(<span class="string">&#x27;字符串2:&#x27;</span>, hello2)</span><br><span class="line">print(<span class="string">&#x27;字符串的长度是:&#x27;</span>, <span class="built_in">len</span>(hello))  <span class="comment">#字符串的长度是: 13</span></span><br><span class="line">print(<span class="string">&#x27;单词首字母大写: &#x27;</span>, hello.title())<span class="comment">#单词首字母大写:  Hello Python!</span></span><br><span class="line">print(<span class="string">&#x27;字符串变大写: &#x27;</span>, hello.upper())  <span class="comment">#字符串变大写:  HELLO PYTHON!</span></span><br><span class="line">print(<span class="string">&#x27;字符串变小写: &#x27;</span>, hello.lower()) <span class="comment">#字符串变小写:  hello python!</span></span><br><span class="line">print(<span class="string">&#x27;字符串截取，只要hello: &#x27;</span>, hello[<span class="number">0</span>:<span class="number">5</span>])    <span class="comment">#字符串截取，只要hello:  hello</span></span><br></pre></td></tr></table></figure><h3 id="1-3、列表"><a href="#1-3、列表" class="headerlink" title="1.3、列表"></a>1.3、列表</h3><p>List（列表） 是 Python 中使用最频繁的数据类型。列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。列表是写在方括号 [] 之间、用逗号分隔开的元素列表。和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>索引值从前到后时，以 0 为开始值，从后到前时，以-1 为开始值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;丰田&#x27;</span>, <span class="string">&#x27;本田&#x27;</span>, <span class="string">&#x27;吉利&#x27;</span>, <span class="string">&#x27;长安&#x27;</span>, <span class="string">&#x27;雪佛兰&#x27;</span>]</span><br><span class="line">print(cars)</span><br><span class="line"><span class="comment"># 通过下标访问元素</span></span><br><span class="line">print(cars[<span class="number">2</span>])   <span class="comment">#从前获取对应索引位置的值</span></span><br><span class="line">print(cars[-<span class="number">2</span>])  <span class="comment">#从后获取对应索引位置的值</span></span><br><span class="line"><span class="comment">#修改元素</span></span><br><span class="line">cars[<span class="number">1</span>] = <span class="string">&#x27;日产&#x27;</span>  <span class="comment">#修改对应位置的对象值</span></span><br><span class="line">print(cars)</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">cars.append(<span class="string">&#x27;别克&#x27;</span>)    <span class="comment">#增加到list最后</span></span><br><span class="line">cars.insert(<span class="number">2</span>, <span class="string">&#x27;长城&#x27;</span>) <span class="comment">#插入到指定索引位置</span></span><br><span class="line">print(cars)</span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="keyword">del</span> cars[<span class="number">1</span>]          <span class="comment">#删除对应索引位置的对象</span></span><br><span class="line">cars.remove(<span class="string">&#x27;别克&#x27;</span>)   <span class="comment">#删除指定内容的对象</span></span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><h3 id="1-4、元祖"><a href="#1-4、元祖" class="headerlink" title="1.4、元祖"></a>1.4、元祖</h3><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。元组中的元素类型可以相同，也可以不同。元祖通常作为常量使用，比如一年有12个月，就可以声明成为一个元祖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">year_t = (<span class="string">&#x27;2020&#x27;</span>, [<span class="string">&quot;January&quot;</span>,<span class="string">&quot;February&quot;</span>,<span class="string">&quot;March&quot;</span>,<span class="string">&quot;April&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;June&quot;</span>,<span class="string">&quot;July&quot;</span>,<span class="string">&quot;August&quot;</span>,<span class="string">&quot;September&quot;</span>,<span class="string">&quot;October&quot;</span>,<span class="string">&quot;November&quot;</span>,<span class="string">&quot;December&quot;</span>])</span><br><span class="line">print(year_t)</span><br><span class="line"><span class="comment"># 获取元组中的元素</span></span><br><span class="line">print(year_t[<span class="number">0</span>])</span><br><span class="line">print(year_t[<span class="number">1</span>])</span><br><span class="line">print(year_t[<span class="number">1</span>][<span class="number">10</span>])</span><br><span class="line"><span class="comment"># 遍历元组中的值</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> year_t:  <span class="comment"># for循环，后续会讲到</span></span><br><span class="line">    print(member)</span><br><span class="line"><span class="comment"># 重新给元组赋值</span></span><br><span class="line"><span class="comment"># year_t[0] = &#x27;2021&#x27;      # TypeError</span></span><br></pre></td></tr></table></figure><h3 id="1-5、字典"><a href="#1-5、字典" class="headerlink" title="1.5、字典"></a>1.5、字典</h3><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。键(key)必须使用不可变类型。在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sexDic = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;未知&#x27;</span>&#125;</span><br><span class="line">print(sexDic)           <span class="comment">#&#123;&#x27;0&#x27;: &#x27;男&#x27;, &#x27;1&#x27;: &#x27;女&#x27;, &#x27;2&#x27;: &#x27;未知&#x27;&#125;</span></span><br><span class="line">print(sexDic.keys())    <span class="comment">#dict_keys([&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;])</span></span><br><span class="line">print(sexDic.values())  <span class="comment">#dict_values([&#x27;男&#x27;, &#x27;女&#x27;, &#x27;未知&#x27;])</span></span><br><span class="line">print(sexDic.items())   <span class="comment">#dict_items([(&#x27;0&#x27;, &#x27;男&#x27;), (&#x27;1&#x27;, &#x27;女&#x27;), (&#x27;2&#x27;, &#x27;未知&#x27;)])</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> sexDic.items():  </span><br><span class="line">    print(elem)   </span><br><span class="line">    print(elem[<span class="number">0</span>], elem[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">in</span> sexDic:   <span class="comment"># if判断，后续会讲到</span></span><br><span class="line">    sexDic[<span class="string">&#x27;0&#x27;</span>] = <span class="string">&#x27;男性&#x27;</span></span><br><span class="line">print(sexDic)   <span class="comment">#&#123;&#x27;0&#x27;: &#x27;男性&#x27;, &#x27;1&#x27;: &#x27;女&#x27;, &#x27;2&#x27;: &#x27;未知&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-6、集合"><a href="#1-6、集合" class="headerlink" title="1.6、集合"></a>1.6、集合</h3><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。基本功能是进行成员关系测试和删除重复元素。可以使用大括号{ }或者set()函数创建集合，注意：创建一个空集合必须用set()而不是{ }，因为{ }是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="comment"># 打印元素</span></span><br><span class="line">print(set1)   <span class="comment">#&#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="comment"># 获取长度</span></span><br><span class="line">print(<span class="string">&#x27;Length =&#x27;</span>, <span class="built_in">len</span>(set1))   <span class="comment">#Length = 6</span></span><br><span class="line"><span class="comment"># 增加元素</span></span><br><span class="line">set1.add(<span class="number">7</span>)</span><br><span class="line">set1.update([<span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">print(set1)  <span class="comment">#&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set1:</span><br><span class="line">    set1.remove(<span class="number">4</span>)</span><br><span class="line">print(set1)  <span class="comment">#&#123;1, 2, 3, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line"><span class="comment"># 遍历集合容器</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> set1:</span><br><span class="line">    print(elem, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print()  <span class="comment"># 1 2 3 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><h2 id="2、命名规则"><a href="#2、命名规则" class="headerlink" title="2、命名规则"></a>2、命名规则</h2><ul><li>变量名的第一个字符必须是字母表中的字母（大写或小写）或者一个下划线（‘ _ ’）。</li><li>变量名的其他部分可以由字母（大写或小写）、下划线（‘ _ ’）或数字（0-9）组成。 </li><li>变量名是对大小写敏感的。例如，myname和myName不是一个变量名。注意前者中 的小写n和后者中的大写N。</li><li>有效变量名的例子有i、__my_name、name_23和a1b2_c3。</li><li>无效变量名的例子有2things、this is spaced out和my-name。</li><li>不要跟关键字（有特殊含义的单词）和系统保留字（如函数、模块等的名字）冲突。    </li></ul><p>PEP 8要求：</p><ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头。</li><li>私有的实例属性用两个下划线开头。</li></ul><h2 id="3、运算符的使用"><a href="#3、运算符的使用" class="headerlink" title="3、运算符的使用"></a>3、运算符的使用</h2><p>用一个例子简单讲解一下运算符的使用。自己动手敲敲代码，运行一下看看效果吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d, e = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">f = a + b</span><br><span class="line">print(<span class="string">&quot;1 + 2 = &quot;</span>, f)</span><br><span class="line">g = e - d</span><br><span class="line">print(<span class="string">&quot;5 - 4 = &quot;</span>, g)</span><br><span class="line">h = b * c</span><br><span class="line">print(<span class="string">&quot;2 * 3 = &quot;</span>, h)</span><br><span class="line">i = d / b</span><br><span class="line">print(<span class="string">&quot;4 / 2 = &quot;</span>, i)</span><br><span class="line">j = e % c</span><br><span class="line">print(<span class="string">&quot;5 % 3 = &quot;</span>, j)</span><br><span class="line">flag1 = a &gt; b</span><br><span class="line">flag2 = d &lt; e</span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> flag1</span><br><span class="line">print(<span class="string">&quot;flag1 = &quot;</span>, flag1)</span><br><span class="line">print(<span class="string">&quot;flag2 = &quot;</span>, flag2)</span><br><span class="line">print(<span class="string">&quot;flag3 = &quot;</span>, flag3)</span><br><span class="line">print(<span class="string">&quot;flag4 = &quot;</span>, flag4)</span><br><span class="line">print(<span class="string">&quot;flag5 = &quot;</span>, flag5)</span><br></pre></td></tr></table></figure><p>运算符的内容比较多，本文只简单介绍几种，想深入学习的读者可以访问这个网站学习<a href="https://www.runoob.com/python/python-operators.html%E3%80%82">https://www.runoob.com/python/python-operators.html。</a></p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>通过变量、数据类型、命名规则、运算符的介绍，我们对python有的大致的了解。其实字符串、列表、字典、元祖、集合等数据类型的操作还有很多，在实际开发过程中，会遇到很多需要处理的内容，大家需要学会查询api文档。大家从python的官方标准库寻找自己想要的内容，<a href="https://docs.python.org/zh-cn/3.10/library/index.html%E3%80%82">https://docs.python.org/zh-cn/3.10/library/index.html。</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一篇文章中，我们打印出了“Hello Python!”的信息。仅仅打印一句话，显然是不够的，那么就让我们一起来学习一下python语言中的数据类型和命名规则。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://taotaolm.vip/categories/python/"/>
    
    
    <category term="数据类型" scheme="http://taotaolm.vip/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="命名规则" scheme="http://taotaolm.vip/tags/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>初识python</title>
    <link href="http://taotaolm.vip/2020/12/20/python/python-1/"/>
    <id>http://taotaolm.vip/2020/12/20/python/python-1/</id>
    <published>2020-12-20T00:15:21.000Z</published>
    <updated>2021-01-01T06:22:10.216Z</updated>
    
    <content type="html"><![CDATA[<p>让我们一起开启python之旅吧！</p><a id="more"></a><h2 id="1、安装python"><a href="#1、安装python" class="headerlink" title="1、安装python"></a>1、安装python</h2><p>Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的。随着python3使用的人群越来越多，因此本课程使用python 3.x版本。由于作者的电脑操作系统是windows7，因此只能选择3.8.x版本的python。截止目前，python的最高版本为3.9.0，但是3.9.0的版本对操作系统的要求是最低为windows8。</p><p>下载地址：<a href="https://www.python.org/downloads/%E3%80%82">https://www.python.org/downloads/。</a></p><img src="1.png" style="zoom:75%;" /><p>根据操作系统的系统类型，64位则选择Windows x86-64 executable installer，32位则选择Windows x86 executable installer。</p><img src="2.png" style="zoom:75%;" /><p>下载完成后，直接双击安装，如下图所示。</p><img src="3.png" style="zoom:75%;" /><p>勾选Add Python 3.8 to PATH，此选项是安装python后，自动将python的环境变量配置到系统中。然后选择Customize installation，此功能是需要自定义python的安装路径。</p><img src="4.png" style="zoom:75%;" /><p>选择Next。</p><img src="5.png" style="zoom:75%;" /><p>选择Browse按钮，重新选择安装路径。根据自己的需要，选择安装的路径后，点击Install按钮，等待安装完成。</p><img src="6.png" style="zoom:75%;" /><p>看到此画面，说明python已经安装完成，点击Close按钮，关闭即可。接下来，让我们一同验证一下python是否安装完成。首先打开选择控制面板–&gt;系统–&gt;高级系统设置–&gt;环境变量–&gt;用户变量中，可以查看到python的环境变量设置即可。然后打开命令窗口，输入python后回车，就会看到如下图所示。</p><img src="7.png" style="zoom:75%;" /><p>如果看到此提示，就说明python安装成了。下面我们就可以开启python的学习之旅了。</p><h2 id="2、IDE的选择"><a href="#2、IDE的选择" class="headerlink" title="2、IDE的选择"></a>2、IDE的选择</h2><p>Python的运行环境已经安装完成，按照开发惯例，我们需要选择一个IDE工具。Python的IDE选择还是挺多的，此处作者不在做过多的对比和介绍。作者秉性的原则就是免费，还用即可。因此，本文选择的是微软公司的Visual Studio Code（以下简称为VS Code）。</p><p>下载地址：<a href="https://code.visualstudio.com./">https://code.visualstudio.com。</a></p><img src="8.png" style="zoom:75%;" /><p>选择稳定版（Stable），尽量不用（Insiders）版本。下载完成后，安装程序，此处不做过多介绍。安装完成后，打开vs code，发现程序的英文的，那么我们首先需要进行一下语言的设置。使用快捷键【Ctrl+Shift+X】，跳转到扩展插件的页面，在输入框内输入chinese，选择中文（简体）的插件，如图所示。</p><img src="9.png" style="zoom:75%;" /><p>先进行语言的选择，使用快捷键【Ctrl+Shift+P】，弹出输入框，输入configure language，选择第一个即可。</p><img src="10.png" style="zoom:75%;" /><p>选择zh-cn，然后重启vs code即可。</p><img src="11.png" style="zoom:75%;" /><p>语言设置完成后，需要安装vs code运行python使用的插件，同样使用快捷键【Ctrl+Shift+X】打开扩展页面，然后输入python，下载python运行的组件。此处作者已经完成完毕了。</p><img src="12.png" style="zoom:75%;" /><p>在电脑中创建一个存放python代码的文件夹，如：F:\python\work\demo1。然后在vs code中选择【文件】–&gt;【打开文件夹】选择对应的文件夹之后，在此目录中创建我们的第一个程序HelloWorld.py。打开此文件，然后敲入代码，打印一句话。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;Hello Python!&quot;</span>)</span><br></pre></td></tr></table></figure><p>编写完成后使用快捷键【ctrl+s】保存代码。</p><p>运行此段程序的方式有很多，比如【ctrl+a】全选程序代码，然后使用快捷键【Shift+回车】即可运行，输入如下图。</p><img src="14.png" style="zoom:75%;" /><p>再者，可以点击窗口右侧的小绿箭头，也同样可以运行程序。</p><img src="15.png" style="zoom:75%;" /><p>最后，也可以选择HelloWorld.py文件，点击鼠标右键，在弹出的菜单中选择【在终端中运行Python文件】。</p><img src="17.png" style="zoom:75%;" /><p>因为本机先安装了python环境，因此打开vs code后，vs code会自动选择系统中配置好的python编辑器，显示在vs code的右下角，如所示。如果需要切换编辑器，则点击右下角位置，弹出选择编辑的窗口，进行选择即可。</p><img src="18.png" style="zoom:75%;" /><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>以上就是我们本文讲解的全部内容。本文只讲解了环境的安装和开发工具的选择，以及简单的一句入门代码。笔者会持续更新python的相关学习内容。感谢大家的支持。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;让我们一起开启python之旅吧！&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://taotaolm.vip/categories/python/"/>
    
    
    <category term="环境准备" scheme="http://taotaolm.vip/tags/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    
    <category term="入门程序" scheme="http://taotaolm.vip/tags/%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
